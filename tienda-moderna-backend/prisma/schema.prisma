// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String
  firstName         String
  lastName          String
  phone             String?
  avatar            String?
  emailVerified     Boolean  @default(false)
  emailVerifiedAt   DateTime?
  isActive          Boolean  @default(true)
  role              UserRole @default(CUSTOMER)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  addresses         Address[]
  orders            Order[]
  reviews           Review[]
  cartItems         CartItem[]
  wishlistItems     WishlistItem[]
  refreshTokens     RefreshToken[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Address {
  id           String      @id @default(cuid())
  userId       String
  type         AddressType @default(SHIPPING)
  firstName    String
  lastName     String
  company      String?
  address1     String
  address2     String?
  city         String
  state        String
  postalCode   String
  country      String      @default("Colombia")
  phone        String?
  isDefault    Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("addresses")
}

// Product models
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?   @db.Text
  image       String?
  icon        String?
  parentId    String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

model Brand {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?   @db.Text
  logo        String?
  website     String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products Product[]

  @@map("brands")
}

model Product {
  id              String        @id @default(cuid())
  name            String
  slug            String        @unique
  description     String        @db.Text
  shortDescription String?      @db.Text
  sku             String        @unique
  barcode         String?
  price           Decimal       @db.Decimal(10, 2)
  comparePrice    Decimal?      @db.Decimal(10, 2)
  costPrice       Decimal?      @db.Decimal(10, 2)
  trackQuantity   Boolean       @default(true)
  quantity        Int           @default(0)
  minQuantity     Int           @default(0)
  weight          Decimal?      @db.Decimal(8, 2)
  dimensions      String?
  status          ProductStatus @default(DRAFT)
  isActive        Boolean       @default(true)
  isFeatured      Boolean       @default(false)
  metaTitle       String?
  metaDescription String?       @db.Text
  categoryId      String
  brandId         String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  category      Category        @relation(fields: [categoryId], references: [id])
  brand         Brand?          @relation(fields: [brandId], references: [id])
  images        ProductImage[]
  variants      ProductVariant[]
  attributes    ProductAttribute[]
  reviews       Review[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  orderItems    OrderItem[]

  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  alt       String?
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id        String   @id @default(cuid())
  productId String
  name      String
  value     String
  price     Decimal? @db.Decimal(10, 2)
  quantity  Int      @default(0)
  sku       String?
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model ProductAttribute {
  id        String   @id @default(cuid())
  productId String
  name      String
  value     String
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_attributes")
}

// Shopping models
model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

// Order models
model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  userId          String
  status          OrderStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  paymentId       String?
  subtotal        Decimal     @db.Decimal(10, 2)
  taxAmount       Decimal     @db.Decimal(10, 2) @default(0)
  shippingAmount  Decimal     @db.Decimal(10, 2) @default(0)
  discountAmount  Decimal     @db.Decimal(10, 2) @default(0)
  totalAmount     Decimal     @db.Decimal(10, 2)
  currency        String      @default("COP")
  notes           String?     @db.Text
  shippingAddressId String?
  billingAddressId  String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  user            User        @relation(fields: [userId], references: [id])
  shippingAddress Address?    @relation(fields: [shippingAddressId], references: [id])
  items           OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Review model
model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      // 1-5 stars
  title     String?
  comment   String?  @db.Text
  isVerified Boolean @default(false)
  isApproved Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

// Enums
enum UserRole {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}

enum AddressType {
  SHIPPING
  BILLING
}

enum ProductStatus {
  DRAFT
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}
